
/* Autogenerated file, do not edit! */

/* eslint-disable */
import { AztecAddress, CompleteAddress, Contract, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, EthAddress, FieldLike, AztecAddressLike, EthAddressLike, Wallet } from '@aztec/aztec.js';
import { Fr, Point } from '@aztec/foundation/fields';
import { PXE, PublicKey } from '@aztec/types';
import { ContractArtifact } from '@aztec/foundation/abi';
import PrivateOracleContractArtifactJson from '../target/PrivateOracle.json' assert { type: 'json' };
export const PrivateOracleContractArtifact = PrivateOracleContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract PrivateOracle;
 */
export class PrivateOracleContract extends ContractBase {

    private constructor(
        completeAddress: CompleteAddress,
        wallet: Wallet,
        portalContract = EthAddress.ZERO
    ) {
        super(completeAddress, PrivateOracleContractArtifact, wallet, portalContract);
    }



    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    public static async at(
        address: AztecAddress,
        wallet: Wallet,
    ) {
        return Contract.at(address, PrivateOracleContract.artifact, wallet) as Promise<PrivateOracleContract>;
    }


    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    public static deploy(pxe: PXE,) {
        return new DeployMethod<PrivateOracleContract>(Point.ZERO, pxe, PrivateOracleContractArtifact, Array.from(arguments).slice(1));
    }

    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    public static deployWithPublicKey(pxe: PXE, publicKey: PublicKey,) {
        return new DeployMethod<PrivateOracleContract>(publicKey, pxe, PrivateOracleContractArtifact, Array.from(arguments).slice(2));
    }



    /**
     * Returns this contract's artifact.
     */
    public static get artifact(): ContractArtifact {
        return PrivateOracleContractArtifact;
    }


    /** Type-safe wrappers for the public methods exposed by the contract. */
    public methods!: {

        /** cancel_question(question: field) */
        cancel_question: ((question: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

        /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, preimage: array) */
        compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, preimage: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

        /** consult_answer(question: field) */
        consult_answer: ((question: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

        /** submit_answer(question: field, requester: field, answer: field) */
        submit_answer: ((question: FieldLike, requester: FieldLike, answer: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

        /** submit_question(question: field, divinity_address: field) */
        submit_question: ((question: FieldLike, divinity_address: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
